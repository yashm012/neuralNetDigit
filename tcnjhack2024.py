# -*- coding: utf-8 -*-
"""TCNJHack2024.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cfCtkrwgZm8XCtCs7VmL7LDbU8yk80ys
"""

import numpy as np
import matplotlib.pyplot as plt
import random


f = open('/content/train-images.idx3-ubyte','rb')

image_size = 28
num_images = 5

f.read(16)
buf = f.read(image_size * image_size * num_images)
data = np.frombuffer(buf, dtype=np.uint8).astype(np.float32)
data = data.reshape(num_images, image_size, image_size, 1)

image = np.asarray(data[2]).squeeze()
plt.imshow(image)
plt.show()

def sigmoid(z):
    """The sigmoid function."""
    return 1.0/(1.0+np.exp(-z))

def sigmoid_prime(z):
    """Derivative of the sigmoid function."""
    return sigmoid(z)*(1-sigmoid(z))

def train_one_iteration(model_inputs, last_cost:float):

      if cost >= last_cost:
          return False, cost
      else:
          model.slope += slope_update
          model.intercept += intercept_update
          return True, cost

def training_loop():
    print("Training beginning...")
    last_cost = math.inf
    continue_loop = True
    while continue_loop:
        continue_loop, last_cost = train_one_iteration(model_inputs = data[""],
                                                    expectedNum = data[""],
                                                    last_cost = last_cost)

    print("Training complete.")
